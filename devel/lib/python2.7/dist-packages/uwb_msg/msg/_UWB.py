# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uwb_msg/UWB.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UWB(genpy.Message):
  _md5sum = "fa8236775a30fd2c3a9eb3c944966d32"
  _type = "uwb_msg/UWB"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[3] coordinates    #coordinates of the anchor
int32[3] position       #locating result 
int32 range             #distance between anchor and tag
int32 ID                #id of the anchor
int8 solver_error_code  
int16 LED_flag          #flag for NLOS/LOS
std_msgs/Header header

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['coordinates','position','range','ID','solver_error_code','LED_flag','header']
  _slot_types = ['int32[3]','int32[3]','int32','int32','int8','int16','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       coordinates,position,range,ID,solver_error_code,LED_flag,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UWB, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.coordinates is None:
        self.coordinates = [0] * 3
      if self.position is None:
        self.position = [0] * 3
      if self.range is None:
        self.range = 0
      if self.ID is None:
        self.ID = 0
      if self.solver_error_code is None:
        self.solver_error_code = 0
      if self.LED_flag is None:
        self.LED_flag = 0
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.coordinates = [0] * 3
      self.position = [0] * 3
      self.range = 0
      self.ID = 0
      self.solver_error_code = 0
      self.LED_flag = 0
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3i().pack(*self.coordinates))
      buff.write(_get_struct_3i().pack(*self.position))
      _x = self
      buff.write(_get_struct_2ibh3I().pack(_x.range, _x.ID, _x.solver_error_code, _x.LED_flag, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 12
      self.coordinates = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 12
      self.position = _get_struct_3i().unpack(str[start:end])
      _x = self
      start = end
      end += 23
      (_x.range, _x.ID, _x.solver_error_code, _x.LED_flag, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_2ibh3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.coordinates.tostring())
      buff.write(self.position.tostring())
      _x = self
      buff.write(_get_struct_2ibh3I().pack(_x.range, _x.ID, _x.solver_error_code, _x.LED_flag, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      start = end
      end += 12
      self.coordinates = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      start = end
      end += 12
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      _x = self
      start = end
      end += 23
      (_x.range, _x.ID, _x.solver_error_code, _x.LED_flag, _x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_2ibh3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ibh3I = None
def _get_struct_2ibh3I():
    global _struct_2ibh3I
    if _struct_2ibh3I is None:
        _struct_2ibh3I = struct.Struct("<2ibh3I")
    return _struct_2ibh3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
