# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ui/robot_feedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class robot_feedback(genpy.Message):
  _md5sum = "cbe9d95f303b479c3949a62170244b88"
  _type = "ui/robot_feedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 时间戳
Header timeHeader
# 反馈关节位置数据 I1 T2 T3 T4 I5
float32[] feedbackPosData
# 反馈关节速度数据
float32[] feedbackVelData
# 反馈关节电流数据
float32[] feedbackCurrData
# 双爪抓夹情况(true:处于抓紧状态；false:处于松开状态),顺序：G0、G6
bool[] isGrasping

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['timeHeader','feedbackPosData','feedbackVelData','feedbackCurrData','isGrasping']
  _slot_types = ['std_msgs/Header','float32[]','float32[]','float32[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeHeader,feedbackPosData,feedbackVelData,feedbackCurrData,isGrasping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_feedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timeHeader is None:
        self.timeHeader = std_msgs.msg.Header()
      if self.feedbackPosData is None:
        self.feedbackPosData = []
      if self.feedbackVelData is None:
        self.feedbackVelData = []
      if self.feedbackCurrData is None:
        self.feedbackCurrData = []
      if self.isGrasping is None:
        self.isGrasping = []
    else:
      self.timeHeader = std_msgs.msg.Header()
      self.feedbackPosData = []
      self.feedbackVelData = []
      self.feedbackCurrData = []
      self.isGrasping = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.timeHeader.seq, _x.timeHeader.stamp.secs, _x.timeHeader.stamp.nsecs))
      _x = self.timeHeader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feedbackPosData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.feedbackPosData))
      length = len(self.feedbackVelData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.feedbackVelData))
      length = len(self.feedbackCurrData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.feedbackCurrData))
      length = len(self.isGrasping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.isGrasping))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timeHeader is None:
        self.timeHeader = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timeHeader.seq, _x.timeHeader.stamp.secs, _x.timeHeader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeHeader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timeHeader.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackPosData = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackVelData = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackCurrData = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.isGrasping = s.unpack(str[start:end])
      self.isGrasping = list(map(bool, self.isGrasping))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.timeHeader.seq, _x.timeHeader.stamp.secs, _x.timeHeader.stamp.nsecs))
      _x = self.timeHeader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feedbackPosData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.feedbackPosData.tostring())
      length = len(self.feedbackVelData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.feedbackVelData.tostring())
      length = len(self.feedbackCurrData)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.feedbackCurrData.tostring())
      length = len(self.isGrasping)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.isGrasping.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timeHeader is None:
        self.timeHeader = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.timeHeader.seq, _x.timeHeader.stamp.secs, _x.timeHeader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeHeader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timeHeader.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackPosData = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackVelData = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feedbackCurrData = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.isGrasping = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.isGrasping = list(map(bool, self.isGrasping))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
