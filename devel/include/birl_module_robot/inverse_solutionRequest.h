// Generated by gencpp from file birl_module_robot/inverse_solutionRequest.msg
// DO NOT EDIT!


#ifndef BIRL_MODULE_ROBOT_MESSAGE_INVERSE_SOLUTIONREQUEST_H
#define BIRL_MODULE_ROBOT_MESSAGE_INVERSE_SOLUTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace birl_module_robot
{
template <class ContainerAllocator>
struct inverse_solutionRequest_
{
  typedef inverse_solutionRequest_<ContainerAllocator> Type;

  inverse_solutionRequest_()
    : which_robot(0)
    , base(false)
    , descartes_pos_commands()
    , descartes_vel_commands()
    , current_joint_state()  {
    }
  inverse_solutionRequest_(const ContainerAllocator& _alloc)
    : which_robot(0)
    , base(false)
    , descartes_pos_commands(_alloc)
    , descartes_vel_commands(_alloc)
    , current_joint_state(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _which_robot_type;
  _which_robot_type which_robot;

   typedef uint8_t _base_type;
  _base_type base;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descartes_pos_commands_type;
  _descartes_pos_commands_type descartes_pos_commands;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descartes_vel_commands_type;
  _descartes_vel_commands_type descartes_vel_commands;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _current_joint_state_type;
  _current_joint_state_type current_joint_state;





  typedef boost::shared_ptr< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct inverse_solutionRequest_

typedef ::birl_module_robot::inverse_solutionRequest_<std::allocator<void> > inverse_solutionRequest;

typedef boost::shared_ptr< ::birl_module_robot::inverse_solutionRequest > inverse_solutionRequestPtr;
typedef boost::shared_ptr< ::birl_module_robot::inverse_solutionRequest const> inverse_solutionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace birl_module_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31c5edc55004419b86af606b1c3081a3";
  }

  static const char* value(const ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31c5edc55004419bULL;
  static const uint64_t static_value2 = 0x86af606b1c3081a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "birl_module_robot/inverse_solutionRequest";
  }

  static const char* value(const ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int16 which_robot\n\
\n\
\n\
bool base\n\
\n\
\n\
float32[] descartes_pos_commands\n\
\n\
\n\
float32[] descartes_vel_commands\n\
\n\
\n\
\n\
float32[] current_joint_state\n\
\n\
";
  }

  static const char* value(const ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.which_robot);
      stream.next(m.base);
      stream.next(m.descartes_pos_commands);
      stream.next(m.descartes_vel_commands);
      stream.next(m.current_joint_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct inverse_solutionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::birl_module_robot::inverse_solutionRequest_<ContainerAllocator>& v)
  {
    s << indent << "which_robot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.which_robot);
    s << indent << "base: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base);
    s << indent << "descartes_pos_commands[]" << std::endl;
    for (size_t i = 0; i < v.descartes_pos_commands.size(); ++i)
    {
      s << indent << "  descartes_pos_commands[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descartes_pos_commands[i]);
    }
    s << indent << "descartes_vel_commands[]" << std::endl;
    for (size_t i = 0; i < v.descartes_vel_commands.size(); ++i)
    {
      s << indent << "  descartes_vel_commands[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descartes_vel_commands[i]);
    }
    s << indent << "current_joint_state[]" << std::endl;
    for (size_t i = 0; i < v.current_joint_state.size(); ++i)
    {
      s << indent << "  current_joint_state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current_joint_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIRL_MODULE_ROBOT_MESSAGE_INVERSE_SOLUTIONREQUEST_H
