// Generated by gencpp from file uwb_msg/UWB.msg
// DO NOT EDIT!


#ifndef UWB_MSG_MESSAGE_UWB_H
#define UWB_MSG_MESSAGE_UWB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uwb_msg
{
template <class ContainerAllocator>
struct UWB_
{
  typedef UWB_<ContainerAllocator> Type;

  UWB_()
    : coordinates()
    , position()
    , range(0)
    , ID(0)
    , solver_error_code(0)
    , LED_flag(0)
    , header()  {
      coordinates.assign(0);

      position.assign(0);
  }
  UWB_(const ContainerAllocator& _alloc)
    : coordinates()
    , position()
    , range(0)
    , ID(0)
    , solver_error_code(0)
    , LED_flag(0)
    , header(_alloc)  {
  (void)_alloc;
      coordinates.assign(0);

      position.assign(0);
  }



   typedef boost::array<int32_t, 3>  _coordinates_type;
  _coordinates_type coordinates;

   typedef boost::array<int32_t, 3>  _position_type;
  _position_type position;

   typedef int32_t _range_type;
  _range_type range;

   typedef int32_t _ID_type;
  _ID_type ID;

   typedef int8_t _solver_error_code_type;
  _solver_error_code_type solver_error_code;

   typedef int16_t _LED_flag_type;
  _LED_flag_type LED_flag;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::uwb_msg::UWB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uwb_msg::UWB_<ContainerAllocator> const> ConstPtr;

}; // struct UWB_

typedef ::uwb_msg::UWB_<std::allocator<void> > UWB;

typedef boost::shared_ptr< ::uwb_msg::UWB > UWBPtr;
typedef boost::shared_ptr< ::uwb_msg::UWB const> UWBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uwb_msg::UWB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uwb_msg::UWB_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uwb_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'uwb_msg': ['/home/ch/code/birl_climbot_location/src/uwb_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uwb_msg::UWB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb_msg::UWB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb_msg::UWB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb_msg::UWB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_msg::UWB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_msg::UWB_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uwb_msg::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa8236775a30fd2c3a9eb3c944966d32";
  }

  static const char* value(const ::uwb_msg::UWB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa8236775a30fd2cULL;
  static const uint64_t static_value2 = 0x3a9eb3c944966d32ULL;
};

template<class ContainerAllocator>
struct DataType< ::uwb_msg::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uwb_msg/UWB";
  }

  static const char* value(const ::uwb_msg::UWB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uwb_msg::UWB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[3] coordinates    #coordinates of the anchor\n\
int32[3] position       #locating result \n\
int32 range             #distance between anchor and tag\n\
int32 ID                #id of the anchor\n\
int8 solver_error_code  \n\
int16 LED_flag          #flag for NLOS/LOS\n\
std_msgs/Header header\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::uwb_msg::UWB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uwb_msg::UWB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coordinates);
      stream.next(m.position);
      stream.next(m.range);
      stream.next(m.ID);
      stream.next(m.solver_error_code);
      stream.next(m.LED_flag);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UWB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uwb_msg::UWB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uwb_msg::UWB_<ContainerAllocator>& v)
  {
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coordinates[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "range: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range);
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "solver_error_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.solver_error_code);
    s << indent << "LED_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LED_flag);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UWB_MSG_MESSAGE_UWB_H
